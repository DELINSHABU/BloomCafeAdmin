"use client";

import React, { useState } from "react";
import { TrendingUp, Crown, User, LogOut, Filter, Calendar } from "lucide-react";
import { Pie, PieChart, CartesianGrid, Line, LineChart, XAxis, Bar, BarChart, LabelList, YAxis } from "recharts";
import { ThemeToggle } from "@/components/theme-toggle";
import { Button } from "@/components/ui/button";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  ChartConfig,
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
} from "@/components/ui/chart";

export const description = "A pie chart with a label";

// Data for different time periods
const dailyData = {
  morning: [
    { type: "John - Assisted Orders", orders: 8, fill: "#3b82f6" },
    { type: "Emily - Assisted Orders", orders: 10, fill: "#10b981" },
    { type: "Mike - Assisted Orders", orders: 12, fill: "#f59e0b" },
    { type: "Sarah - Assisted Orders", orders: 4, fill: "#ef4444" },
    { type: "David - Assisted Orders", orders: 6, fill: "#8b5cf6" },
    { type: "Customer Orders", orders: 25, fill: "#6b7280" },
  ],
  noon: [
    { type: "John - Assisted Orders", orders: 15, fill: "#3b82f6" },
    { type: "Emily - Assisted Orders", orders: 18, fill: "#10b981" },
    { type: "Mike - Assisted Orders", orders: 22, fill: "#f59e0b" },
    { type: "Sarah - Assisted Orders", orders: 8, fill: "#ef4444" },
    { type: "David - Assisted Orders", orders: 12, fill: "#8b5cf6" },
    { type: "Customer Orders", orders: 45, fill: "#6b7280" },
  ],
  night: [
    { type: "John - Assisted Orders", orders: 12, fill: "#3b82f6" },
    { type: "Emily - Assisted Orders", orders: 14, fill: "#10b981" },
    { type: "Mike - Assisted Orders", orders: 18, fill: "#f59e0b" },
    { type: "Sarah - Assisted Orders", orders: 6, fill: "#ef4444" },
    { type: "David - Assisted Orders", orders: 9, fill: "#8b5cf6" },
    { type: "Customer Orders", orders: 35, fill: "#6b7280" },
  ],
  fullDay: [
    { type: "John - Assisted Orders", orders: 35, fill: "#3b82f6" },
    { type: "Emily - Assisted Orders", orders: 42, fill: "#10b981" },
    { type: "Mike - Assisted Orders", orders: 52, fill: "#f59e0b" },
    { type: "Sarah - Assisted Orders", orders: 18, fill: "#ef4444" },
    { type: "David - Assisted Orders", orders: 27, fill: "#8b5cf6" },
    { type: "Customer Orders", orders: 105, fill: "#6b7280" },
  ]
};

// Colors matching line chart style for consistency
const pieChartData = [
  { type: "John - Assisted Orders", orders: 20, fill: "#3b82f6" }, // Blue
  { type: "Emily - Assisted Orders", orders: 25, fill: "#10b981" }, // Green
  { type: "Mike - Assisted Orders", orders: 30, fill: "#f59e0b" }, // Amber
  { type: "Sarah - Assisted Orders", orders: 10, fill: "#ef4444" }, // Red
  { type: "David - Assisted Orders", orders: 15, fill: "#8b5cf6" }, // Purple
  { type: "Customer Orders", orders: 65, fill: "#6b7280" }, // Grey
];

// Line chart data for all orders over time (waiters + customers)
const lineChartData = [
  { month: "January", john: 18, emily: 22, mike: 28, sarah: 8, david: 12, customer: 45 },
  { month: "February", john: 25, emily: 30, mike: 35, sarah: 15, david: 18, customer: 65 },
  { month: "March", john: 22, emily: 28, mike: 32, sarah: 12, david: 16, customer: 58 },
  { month: "April", john: 15, emily: 20, mike: 25, sarah: 18, david: 22, customer: 72 },
  { month: "May", john: 28, emily: 35, mike: 40, sarah: 20, david: 25, customer: 68 },
  { month: "June", john: 20, emily: 25, mike: 30, sarah: 10, david: 15, customer: 55 },
];

// Revenue data for bar chart (total revenue generated by each person/category)
const revenueData = [
  { person: "Customer Orders", revenue: 154200, fill: "#6b7280" }, // Grey
  { person: "Mike", revenue: 89500, fill: "#f59e0b" }, // Amber
  { person: "Emily", revenue: 72500, fill: "#10b981" }, // Green
  { person: "John", revenue: 61800, fill: "#3b82f6" }, // Blue
  { person: "David", revenue: 48900, fill: "#8b5cf6" }, // Purple
  { person: "Sarah", revenue: 32400, fill: "#ef4444" }, // Red
];

const pieChartConfig = {
  orders: {
    label: "Orders",
  },
  assisted: {
    label: "Assisted Orders",
    color: "#3b82f6", // Blue similar to John
  },
  customer: {
    label: "Customer Orders",
    color: "#6b7280", // Grey color
  },
} satisfies ChartConfig;

const lineChartConfig = {
  john: {
    label: "John",
    color: "hsl(var(--chart-1))",
  },
  emily: {
    label: "Emily",
    color: "hsl(var(--chart-2))",
  },
  mike: {
    label: "Mike",
    color: "hsl(var(--chart-3))",
  },
  sarah: {
    label: "Sarah",
    color: "hsl(var(--chart-4))",
  },
  david: {
    label: "David",
    color: "hsl(var(--chart-5))",
  },
  customer: {
    label: "Customer Orders",
    color: "#6b7280", // Grey color
  },
} satisfies ChartConfig;

const barChartConfig = {
  revenue: {
    label: "Revenue",
    color: "hsl(var(--chart-2))",
  },
  label: {
    color: "hsl(var(--background))",
  },
} satisfies ChartConfig;

export default function DetailedAnalyticsPage() {
  const [timePeriod, setTimePeriod] = useState("fullRecord");
  const [dayPeriod, setDayPeriod] = useState("fullDay");

  // Get current data based on selected filters
  const getCurrentPieData = () => {
    if (timePeriod === "oneDay") {
      return dailyData[dayPeriod as keyof typeof dailyData];
    }
    return pieChartData; // Default for one month and full record
  };

  const getChartTitle = () => {
    if (timePeriod === "oneDay") {
      const periodLabels = {
        morning: "Morning (6 AM - 12 PM)",
        noon: "Noon (12 PM - 6 PM)",
        night: "Night (6 PM - 12 AM)",
        fullDay: "Full Day"
      };
      return `Orders - ${periodLabels[dayPeriod as keyof typeof periodLabels]}`;
    }
    if (timePeriod === "oneMonth") return "Orders - This Month";
    return "Orders - Full Record";
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <div className="bg-gradient-to-r from-purple-700 to-indigo-700 text-white p-4 sm:p-6">
        <div className="flex items-center justify-between">
          <div>
            <div className="flex items-center gap-3 mb-2">
              <Crown className="w-8 h-8 text-yellow-300" />
              <h1 className="text-xl sm:text-2xl font-bold">
                Detailed Analytics
              </h1>
            </div>
            <p className="text-purple-100 text-sm sm:text-base">
              Insights into waiter performance and customer interaction
            </p>
          </div>
          <div className="flex items-center gap-2">
            <ThemeToggle />
          </div>
        </div>
      </div>

      <div className="p-4 sm:p-6">
        {/* Filter Controls */}
        <Card className="mb-6">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Filter className="w-5 h-5" />
              Analytics Filters
            </CardTitle>
            <CardDescription>
              Filter analytics data by time period and day segments
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="flex flex-col sm:flex-row gap-4">
              {/* Time Period Filter */}
              <div className="flex-1">
                <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
                  Time Period
                </label>
                <Select value={timePeriod} onValueChange={setTimePeriod}>
                  <SelectTrigger className="w-full">
                    <SelectValue placeholder="Select time period" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="oneDay">One Day</SelectItem>
                    <SelectItem value="oneMonth">One Month</SelectItem>
                    <SelectItem value="fullRecord">Full Record</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              
              {/* Day Period Filter - Only show when One Day is selected */}
              {timePeriod === "oneDay" && (
                <div className="flex-1">
                  <label className="text-sm font-medium text-gray-700 dark:text-gray-300 mb-2 block">
                    Day Period
                  </label>
                  <Select value={dayPeriod} onValueChange={setDayPeriod}>
                    <SelectTrigger className="w-full">
                      <SelectValue placeholder="Select day period" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="fullDay">Full Day</SelectItem>
                      <SelectItem value="morning">Morning (6 AM - 12 PM)</SelectItem>
                      <SelectItem value="noon">Noon (12 PM - 6 PM)</SelectItem>
                      <SelectItem value="night">Night (6 PM - 12 AM)</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
              )}
            </div>
          </CardContent>
        </Card>
        
        {/* Charts Grid */}
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
          {/* Pie Chart Card */}
          <Card className="flex flex-col">
            <CardHeader className="items-center pb-0">
              <CardTitle>{getChartTitle()}</CardTitle>
              <CardDescription>
                {timePeriod === "oneDay" 
                  ? `Waiter performance breakdown for selected time period`
                  : "Individual waiter orders vs customer self-service orders"
                }
              </CardDescription>
            </CardHeader>
            <CardContent className="flex-1 pb-0">
              <ChartContainer
                config={pieChartConfig}
                className="[&_.recharts-pie-label-text]:fill-foreground mx-auto aspect-square max-h-[250px] pb-0"
              >
                <PieChart key={`${timePeriod}-${dayPeriod}`}>
                  <ChartTooltip content={<ChartTooltipContent hideLabel />} />
                  <Pie 
                    data={getCurrentPieData()} 
                    dataKey="orders" 
                    label 
                    nameKey="type" 
                    animationBegin={0}
                    animationDuration={800}
                  />
                </PieChart>
              </ChartContainer>
            </CardContent>
            <CardFooter className="flex-col gap-4 text-sm">
              {/* Chart Legend */}
              <div className="grid grid-cols-2 gap-2 w-full">
                {getCurrentPieData()
                  .sort((a, b) => b.orders - a.orders)
                  .map((item, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <div 
                        className="w-3 h-3 rounded-full flex-shrink-0" 
                        style={{ backgroundColor: item.fill }}
                      ></div>
                      <span className="text-xs truncate">
                        {item.type.replace(" - Assisted Orders", "")}: {item.orders}
                      </span>
                    </div>
                  ))
                }
              </div>
              
              {/* Trending Info */}
              <div className="flex items-center gap-2 leading-none font-medium pt-2 border-t">
                Trending up by 5.2% this month <TrendingUp className="h-4 w-4" />
              </div>
              <div className="text-muted-foreground leading-none">
                Showing individual waiter performance and customer self-service orders
              </div>
            </CardFooter>
          </Card>
          
          {/* Line Chart Card */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle>Orders Over Time</CardTitle>
              <CardDescription>Monthly order trends for waiters and customers (January - June 2024)</CardDescription>
            </CardHeader>
            <CardContent className="flex-1">
              <ChartContainer key={`line-container-${timePeriod}-${dayPeriod}`} config={lineChartConfig}>
                <LineChart
                  accessibilityLayer
                  data={lineChartData}
                  margin={{
                    left: 12,
                    right: 12,
                  }}
                >
                  <CartesianGrid vertical={false} />
                  <XAxis
                    dataKey="month"
                    tickLine={false}
                    axisLine={false}
                    tickMargin={8}
                    tickFormatter={(value) => value.slice(0, 3)}
                  />
                  <ChartTooltip cursor={false} content={<ChartTooltipContent />} />
                  <Line
                    dataKey="john"
                    type="monotone"
                    stroke="#3b82f6"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={0}
                    animationDuration={800}
                  />
                  <Line
                    dataKey="emily"
                    type="monotone"
                    stroke="#10b981"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={100}
                    animationDuration={800}
                  />
                  <Line
                    dataKey="mike"
                    type="monotone"
                    stroke="#f59e0b"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={200}
                    animationDuration={800}
                  />
                  <Line
                    dataKey="sarah"
                    type="monotone"
                    stroke="#ef4444"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={300}
                    animationDuration={800}
                  />
                  <Line
                    dataKey="david"
                    type="monotone"
                    stroke="#8b5cf6"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={400}
                    animationDuration={800}
                  />
                  <Line
                    dataKey="customer"
                    type="monotone"
                    stroke="#6b7280"
                    strokeWidth={2}
                    dot={false}
                    animationBegin={500}
                    animationDuration={800}
                  />
                </LineChart>
              </ChartContainer>
            </CardContent>
            <CardFooter className="flex-col gap-4 text-sm">
              {/* Line Chart Legend */}
              <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-2 w-full">
                {[
                  { name: "Customer Orders", value: lineChartData[lineChartData.length - 1].customer, color: "#6b7280" },
                  { name: "Mike", value: lineChartData[lineChartData.length - 1].mike, color: "#f59e0b" },
                  { name: "Emily", value: lineChartData[lineChartData.length - 1].emily, color: "#10b981" },
                  { name: "John", value: lineChartData[lineChartData.length - 1].john, color: "#3b82f6" },
                  { name: "David", value: lineChartData[lineChartData.length - 1].david, color: "#8b5cf6" },
                  { name: "Sarah", value: lineChartData[lineChartData.length - 1].sarah, color: "#ef4444" }
                ]
                  .sort((a, b) => b.value - a.value)
                  .map((item, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <div className="w-3 h-3 rounded-full flex-shrink-0" style={{ backgroundColor: item.color }}></div>
                      <span className="text-xs truncate">{item.name}: {item.value}</span>
                    </div>
                  ))
                }
              </div>
              
              {/* Trending Info */}
              <div className="flex w-full items-start gap-2 pt-2 border-t">
                <div className="grid gap-2">
                  <div className="flex items-center gap-2 leading-none font-medium">
                    Trending up by 8.5% this month <TrendingUp className="h-4 w-4" />
                  </div>
                  <div className="text-muted-foreground flex items-center gap-2 leading-none">
                    Showing order trends for waiters and customers over the last 6 months
                  </div>
                </div>
              </div>
            </CardFooter>
          </Card>
          
          {/* Revenue Bar Chart Card */}
          <Card className="flex flex-col">
            <CardHeader>
              <CardTitle>Revenue Analytics</CardTitle>
              <CardDescription>Total Revenue Generated by Each Waiter and Customers</CardDescription>
            </CardHeader>
            <CardContent className="flex-1">
              <ChartContainer key={`bar-container-${timePeriod}-${dayPeriod}`} config={barChartConfig}>
                <BarChart
                  accessibilityLayer
                  data={revenueData}
                  margin={{
                    top: 20,
                    left: 12,
                    right: 12,
                  }}
                >
                  <CartesianGrid vertical={false} />
                  <XAxis
                    dataKey="person"
                    tickLine={false}
                    tickMargin={10}
                    axisLine={false}
                    tickFormatter={(value) => value.length > 8 ? `${value.slice(0, 8)}...` : value}
                  />
                  <YAxis
                    tickLine={false}
                    axisLine={false}
                    tickMargin={8}
                    tickFormatter={(value) => `₹${(value / 1000).toFixed(0)}k`}
                  />
                  <ChartTooltip
                    cursor={false}
                    content={<ChartTooltipContent hideLabel />}
                  />
                  <Bar 
                    dataKey="revenue" 
                    radius={8}
                    animationBegin={0}
                    animationDuration={800}
                  >
                    <LabelList
                      position="top"
                      offset={12}
                      className="fill-foreground"
                      fontSize={12}
                      formatter={(value: number) => `₹${(value / 1000).toFixed(1)}k`}
                    />
                  </Bar>
                </BarChart>
              </ChartContainer>
            </CardContent>
            <CardFooter className="flex-col gap-4 text-sm">
              {/* Revenue Legend */}
              <div className="grid grid-cols-2 md:grid-cols-3 gap-2 w-full">
                {revenueData
                  .sort((a, b) => b.revenue - a.revenue)
                  .map((item, index) => (
                    <div key={index} className="flex items-center gap-2">
                      <div 
                        className="w-3 h-3 rounded-full flex-shrink-0" 
                        style={{ backgroundColor: item.fill }}
                      ></div>
                      <span className="text-xs truncate">
                        {item.person}: ₹{(item.revenue / 1000).toFixed(1)}k
                      </span>
                    </div>
                  ))
                }
              </div>
              
              {/* Trending Info */}
              <div className="flex items-center gap-2 leading-none font-medium pt-2 border-t">
                Revenue up by 12.3% this month <TrendingUp className="h-4 w-4" />
              </div>
              <div className="text-muted-foreground leading-none">
                Showing total revenue generated by each waiter and customer orders
              </div>
            </CardFooter>
          </Card>
        </div>
      </div>
    </div>
  );
}
